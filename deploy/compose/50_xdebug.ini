;;; Enable Xdebug
; profile mode might bring a lot of /tmp/cachegrind.out.xxx
; when running for longer hours, it might eat up disk space
; enable profile mode only when needed
;zend_extension=xdebug
;xdebug.mode=debug,coverage,develop
xdebug.start_with_request=1

;;; Xdebug client configuration
; When running locally, i.e client/IDE is on the same machine as the Docker host,
; use host.docker.internal to connect to the machine from inside the containers.
; For Docker Desktop, this is the default hostname to access the host.
; For Linux with Docker Engine, set in addition extra_hosts as:
;    host.docker.internal:host-gateway
; For other setups, replace host.docker.internal with IP address of your client machine.
xdebug.client_host=host.docker.internal
; Use the port you set up in your client/IDE where you read xdebug results.
; For VS Code, for example, add a configuration to .vscode/launch.json:
; VS Code launch.json example:
;   name: Listen for Xdebug
;   type: php
;   request: launch
;   port: 9003
;   pathMappings:
;     /app/bluespice/w => /your/code/dir
;     /data => /your/data/dir/wiki
xdebug.client_port=9003
xdebug.idekey=VSCODE

;;; Xdebug logs and outputs
; We make use of the persistent storage directories for storing newly generated files
xdebug.log=/data/bluespice/logs/xdebug.log
xdebug.log_level=0
xdebug.output_dir=/data/bluespice/cache
